
from utils import allowed_file, UPLOAD_FOLDER
from sqlalchemy import or_, func, and_
from flask import Flask, redirect, url_for, session, request, render_template, flash, jsonify, abort
from sqlalchemy.exc import IntegrityError
from dateutil.relativedelta import relativedelta

from datetime import timedelta  # timedelta —Ç–µ–ø–µ—Ä—å –∏–∑ datetime
from flask_login import LoginManager, login_user, logout_user, current_user

from flask_migrate import Migrate
from models import db, User, Item, Payment, License, Investor
from config import Config
from datetime import datetime, date, timezone, timedelta

from utils import get_static_files
from werkzeug.utils import secure_filename
from flask import send_file, flash, redirect, url_for, request, current_app
from flask_login import login_required
from io import BytesIO
from reportlab.lib.pagesizes import A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib import colors
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
import os
from authlib.integrations.flask_client import OAuth
from flask import session
import secrets
import locale
from dotenv import load_dotenv

app = Flask(__name__)
app.config.from_object(Config)
app.config['UPLOAD_FOLDER'] = os.path.join('static', 'uploads')

locale.setlocale(locale.LC_TIME,'Russian_Russia.1251')

load_dotenv()
db.init_app(app)
migrate = Migrate(app, db)



login_manager = LoginManager()
login_manager.login_view = 'login'
login_manager.init_app(app)
oauth = OAuth(app)
# OAuth
oauth.register(
    name='google',
    client_id=app.config["GOOGLE_CLIENT_ID"],
    client_secret=app.config["GOOGLE_CLIENT_SECRET"],
    server_metadata_url=app.config["GOOGLE_DISCOVERY_URL"],
    client_kwargs={
        'scope': 'openid email profile'
    }
)


# –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (—Ä–∞–∑—Ä–µ—à–∏—Ç—å http)
os.environ['OAUTHLIB_INSECURE_TRANSPORT'] = '1'



# –ù–ê–°–¢–†–û–ô–ö–ê: –ø–æ–ª–∏—Ç–∏–∫–∞ "–¥–æ –∫–∞–∫–æ–≥–æ –¥–Ω—è –ø–ª–∞—Ç–∏—Ç—å –∑–∞ –º–µ—Å—è—Ü"
# –í–∞—Ä–∏–∞–Ω—Ç—ã:
# 1 ‚Äî "end_of_month" ‚Äî –¥–æ –∫–æ–Ω—Ü–∞ –º–µ—Å—è—Ü–∞ (31.07.2025)
# 2 ‚Äî —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä, 15 => –¥–æ 15 —á–∏—Å–ª–∞ –º–µ—Å—è—Ü–∞ (15.07.2025)
# 3 ‚Äî N –¥–Ω–µ–π –ø–æ—Å–ª–µ –¥–∞—Ç—ã –æ–∂–∏–¥–∞–Ω–∏—è ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä, 10 –¥–Ω–µ–π

PAYMENT_POLICY = {
    "mode": "end_of_month",  # "end_of_month" | "fixed_day" | "grace_days"
    "fixed_day": 15,         # –µ—Å–ª–∏ mode = "fixed_day"
    "grace_days": 10         # –µ—Å–ª–∏ mode = "grace_days"
}



def get_due_date(expected_date):
    """
    expected_date ‚Äî –¥–∞—Ç–∞, –∫–æ–≥–¥–∞ –Ω–∞—Å—Ç—É–ø–∏–ª –æ–∂–∏–¥–∞–µ–º—ã–π –ø–ª–∞—Ç—ë–∂–Ω—ã–π –º–µ—Å—è—Ü
    –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–∞–π–Ω—é—é –¥–∞—Ç—É –æ–ø–ª–∞—Ç—ã
    """
    if PAYMENT_POLICY["mode"] == "end_of_month":
        # –ö–æ–Ω–µ—Ü –º–µ—Å—è—Ü–∞
        next_month = expected_date + relativedelta(months=1)
        due_date = next_month.replace(day=1) - timedelta(days=1)
        return due_date

    elif PAYMENT_POLICY["mode"] == "fixed_day":
        # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–æ 15 —á–∏—Å–ª–∞ –º–µ—Å—è—Ü–∞)
        next_month = expected_date + relativedelta(months=1)
        due_day = PAYMENT_POLICY["fixed_day"]
        try:
            due_date = next_month.replace(day=due_day)
        except ValueError:
            # –ï—Å–ª–∏ –≤ –º–µ—Å—è—Ü–µ –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –¥–Ω—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 30 —Ñ–µ–≤—Ä–∞–ª—è), –±–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
            next_month = next_month + relativedelta(months=1)
            due_date = next_month.replace(day=1) - timedelta(days=1)
        return due_date

    elif PAYMENT_POLICY["mode"] == "grace_days":
        # N –¥–Ω–µ–π –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–µ–º–æ–π –¥–∞—Ç—ã
        grace_days = PAYMENT_POLICY["grace_days"]
        due_date = expected_date + timedelta(days=grace_days)
        return due_date

    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –∫–æ–Ω–µ—Ü –º–µ—Å—è—Ü–∞
        next_month = expected_date + relativedelta(months=1)
        due_date = next_month.replace(day=1) - timedelta(days=1)
        return due_date



# –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (—Ä–∞–∑—Ä–µ—à–∏—Ç—å http)
os.environ['OAUTHLIB_INSECURE_TRANSPORT'] = '1'




@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))






# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
@app.route("/")
def home():
    return render_template("home.html")




@app.route("/login")
def login():
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ state –∏ nonce –¥–ª—è –∫–∞–∂–¥–æ–π —Å–µ—Å—Å–∏–∏
    state = secrets.token_urlsafe(32)
    nonce = secrets.token_urlsafe(32)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–µ—Å—Å–∏–∏ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π (–∏—Å–ø–æ–ª—å–∑—É–µ–º timezone-aware datetime)
    session['oauth_state'] = {
        'value': state,
        'created_at': datetime.now(timezone.utc).isoformat()
    }
    session['nonce'] = nonce
    session['next_url'] = request.args.get('next')  # –°–æ—Ö—Ä–∞–Ω—è–µ–º next URL –∏–∑ –∑–∞–ø—Ä–æ—Å–∞

    # –§–æ—Ä–º–∏—Ä—É–µ–º redirect_uri —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
    redirect_uri = url_for('auth_callback', _external=True)

    return oauth.google.authorize_redirect(
        redirect_uri,
        state=state,
        nonce=nonce,
        prompt="select_account",
        include_granted_scopes="true",
        access_type="offline"
    )

@app.route("/auth/callback")
def auth_callback():
    if 'state' not in request.args:
        return "Missing state parameter", 400

    saved_state = session.pop('oauth_state', None)
    if not saved_state:
        return "Session expired or invalid state", 400

    state_created = datetime.fromisoformat(saved_state['created_at'])
    if datetime.now(timezone.utc) - state_created > timedelta(minutes=10):
        return "State expired", 400

    if request.args['state'] != saved_state['value']:
        return "Invalid state parameter", 400

    nonce = session.pop('nonce', None)
    if not nonce:
        return "Nonce missing", 400

    try:
        token = oauth.google.authorize_access_token()
        user_info = oauth.google.parse_id_token(token, nonce=nonce)
        if not user_info or 'email' not in user_info:
            return "Failed to retrieve user info", 400

        email = user_info.get("email", "").lower()
        user = User.query.filter_by(email=email).first()

        if not user:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Üí –Ω–µ –ø—É—Å–∫–∞–µ–º
            return render_template("license_required.html")

        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω ‚Üí –ª–æ–≥–∏–Ω–∏–º
        login_user(user, remember=True)

        # –†–µ–¥–∏—Ä–µ–∫—Ç–∏–º
        return redirect(session.pop("next_url", None) or url_for("dashboard"))

    except Exception as e:
        app.logger.error(f"OAuth error: {str(e)}", exc_info=True)
        return "Authentication failed", 400



# üîí –°—Ç—Ä–∞–Ω–∏—Ü–∞ "–õ–∏—Ü–µ–Ω–∑–∏—è —Ç—Ä–µ–±—É–µ—Ç—Å—è"
@app.route("/license-required")
def license_required_page():
    return render_template("license_required.html")



# üîì –í—ã—Ö–æ–¥
@app.route("/logout")
@login_required
def logout():
    logout_user()
    return redirect(url_for("home"))


@app.route("/admin/users")
@login_required
def admin_users():
    if not current_user.is_admin:
        abort(403)

    search_query = request.args.get("search")  # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    if search_query:
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ email (—Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π –ø–æ–∏—Å–∫)
        users = User.query.filter(User.email.ilike(f"%{search_query}%")).all()
    else:
        users = User.query.all()  # –ï—Å–ª–∏ –ø–æ–∏—Å–∫ –ø—É—Å—Ç–æ–π ‚Äî –≤—ã–≤–æ–¥–∏–º –≤—Å–µ—Ö

    return render_template("admin_users.html", users=users)

@app.route("/admin/add_user", methods=["POST"])
@login_required
def add_user_by_email():
    if not current_user.is_admin:
        abort(403)

    email = request.form.get("email", "").strip().lower()
    if not email:
        return redirect(url_for("admin_users"))

    user = User.query.filter_by(email=email).first()
    if not user:
        user = User(email=email, is_admin=False)
        db.session.add(user)
        db.session.flush()  # user.id

    # –í—ã–¥–∞—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é –Ω–∞ 1 –≥–æ–¥
    license = License(
        user_id=user.id,
        activated_at=datetime.utcnow(),
        expires_at=datetime.utcnow() + timedelta(days=365),
        is_active=True,
        activated_by=current_user.id
    )
    db.session.add(license)
    db.session.commit()

    flash("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –∏ –ª–∏—Ü–µ–Ω–∑–∏—è –≤—ã–¥–∞–Ω–∞", "success")
    return redirect(url_for("admin_users"))


@app.route("/admin/toggle_admin/<int:user_id>", methods=["POST"])
@login_required
def toggle_admin(user_id):
    if not current_user.is_admin:
        abort(403)

    user = User.query.get_or_404(user_id)
    user.is_admin = not user.is_admin
    db.session.commit()
    return redirect(url_for("admin_users"))
@app.route("/admin/activate_license/<int:user_id>", methods=["POST"])
@login_required
def activate_license(user_id):
    if not current_user.is_admin:
        abort(403)

    user = User.query.get_or_404(user_id)
    expiration_str = request.form.get("expiration", "").strip()

    if not expiration_str:
        flash("–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞", "danger")
        return redirect(url_for("admin_users"))

    try:
        expiration_date = datetime.strptime(expiration_str, "%d.%m.%Y")
    except ValueError:
        flash("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥", "danger")
        return redirect(url_for("admin_users"))

    # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –ª–∏—Ü–µ–Ω–∑–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for license in user.licenses:
        license.is_active = False

    # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –ª–∏—Ü–µ–Ω–∑–∏—é
    new_license = License(
        user_id=user.id,
        activated_at=datetime.utcnow(),
        expires_at=expiration_date,
        is_active=True,
        activated_by=current_user.id
    )
    db.session.add(new_license)
    db.session.commit()

    flash(f"–ù–æ–≤–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–æ {expiration_date.strftime('%d.%m.%Y')}", "success")
    return redirect(url_for("admin_users"))

#–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ª–∏—Ü–µ–Ω–∑–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@app.route("/admin/user/<int:user_id>/licenses")
@login_required
def user_license_history(user_id):
    if not current_user.is_admin:
        abort(403)

    user = User.query.get_or_404(user_id)
    licenses = License.query.filter_by(user_id=user.id).order_by(License.activated_at.desc()).all()
    return render_template("license_history.html", user=user, licenses=licenses)

#–†–æ—É—Ç –¥–ª—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ª–∏—Ü–µ–Ω–∑–∏–∏ –≤—Ä—É—á–Ω—É—é
@app.route("/admin/deactivate_license/<int:license_id>", methods=["POST"])
@login_required
def deactivate_license(license_id):
    if not current_user.is_admin:
        abort(403)

    license = License.query.get_or_404(license_id)
    license.is_active = False
    db.session.commit()

    flash("–õ–∏—Ü–µ–Ω–∑–∏—è –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞", "warning")
    return redirect(url_for("user_license_history", user_id=license.user_id))


@app.route("/admin/delete_user/<int:user_id>", methods=["POST"])
@login_required
def delete_user(user_id):
    if not current_user.is_admin:
        abort(403)

    user = User.query.get_or_404(user_id)
    if user.email == current_user.email:
        # –ó–∞—â–∏—Ç–∞ –æ—Ç —É–¥–∞–ª–µ–Ω–∏—è —Å–µ–±—è
        return redirect(url_for("admin_users"))

    if user.items or user.licenses:  # üëà –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∏
        flash("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Äî –µ—Å—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", "danger")
        return redirect(url_for("admin_users"))

    db.session.delete(user)
    db.session.commit()
    flash("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω", "success")
    return redirect(url_for("admin_users"))




@app.route('/service-worker.js')
def service_worker():
    from flask import Response
    cached_files = get_static_files()
    content = render_template('service-worker.js.j2', cached_files=cached_files)
    return Response(content, mimetype='application/javascript')

@app.after_request
def add_headers(response):
    if request.path == '/service-worker.js':
        response.headers['Cache-Control'] = 'no-cache'
    return response


#—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É–º–º—ã —Ä—É–±
def format_rubles(value):
    try:
        value = float(value)
        formatted = "{:,.2f}".format(value).replace(",", " ").replace(".", ",")
        return f"{formatted} ‚ÇΩ"
    except (ValueError, TypeError):
        return value

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä –≤ Jinja
app.jinja_env.filters['rub'] = format_rubles


@app.route('/item/edit/<int:item_id>', methods=['GET', 'POST'])
@login_required
def edit_item(item_id):
    item = Item.query.get_or_404(item_id)
    investors = Investor.query.all()
    if not (current_user.is_admin or item.user_id == current_user.id):
        abort(403)



    if request.method == 'POST':
        item.name = request.form['name']
        item.price = request.form['price']
        item.purchase_price = request.form['purchase_price']
        item.installments = request.form['installments']
        item.client_name = request.form['client_name']
        item.client_phone = request.form['client_phone']
        item.guarantor_name = request.form['guarantor_name']
        item.guarantor_phone = request.form['guarantor_phone']
        item.user_id = current_user.id
        item.investor_id = request.form.get('investor_id') or None
        # –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ
        if 'delete_photo' in request.form and item.photo_url:
            photo_path = os.path.join(current_app.root_path, 'static', 'uploads', item.photo_url)
            if os.path.exists(photo_path):
                os.remove(photo_path)
            item.photo_url = None

        # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ç–æ
        photo = request.files.get('photo')
        if photo and allowed_file(photo.filename):
            filename = secure_filename(photo.filename)
            photo.save(os.path.join(app.config['UPLOAD_FOLDER'], filename))
            item.photo_url = filename

        db.session.commit()
        flash('–¢–æ–≤–∞—Ä –æ–±–Ω–æ–≤–ª—ë–Ω —É—Å–ø–µ—à–Ω–æ.', 'success')
        return redirect(url_for('contracts'))

    return render_template('edit_item.html', item=item, investors=investors)


@app.route('/item/delete/<int:item_id>', methods=['POST'])
@login_required

def delete_item(item_id):
    item = Item.query.get_or_404(item_id)

    if not (current_user.is_admin or item.user_id == current_user.id):
        flash("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", "danger")
        return redirect(url_for('contracts'))
    if item.payments:
        flash("‚ö†Ô∏è –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ ‚Äî –ø–æ –¥–æ–≥–æ–≤–æ—Ä—É —É–∂–µ –±—ã–ª–∏ –≤–Ω–µ—Å–µ–Ω—ã –ø–ª–∞—Ç–µ–∂–∏.", "danger")
        return redirect(url_for('contracts'))

    try:
        db.session.delete(item)
        db.session.commit()
        flash("‚úÖ –î–æ–≥–æ–≤–æ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.", "info")
    except IntegrityError:
        db.session.rollback()
        flash("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: –¥–æ–≥–æ–≤–æ—Ä —Å–≤—è–∑–∞–Ω —Å –¥—Ä—É–≥–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏.", "danger")

    return redirect(url_for('contracts'))





# –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç / –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
@app.route("/dashboard", methods=["GET", "POST"])
@login_required
def dashboard():

    if request.method == "POST":

        if not current_user.active_license:
            flash("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ª–∏—Ü–µ–Ω–∑–∏–∏. –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.", "danger")
            return redirect(url_for("dashboard"))

        name = request.form.get("name")
        price = float(request.form.get("price"))
        purchase_price = float(request.form["purchase_price"])
        installments = int(request.form.get("installments"))
        client_name = request.form.get("client_name")
        guarantor_name = request.form.get("guarantor_name")
        client_phone = request.form["client_phone"]
        guarantor_phone = request.form["guarantor_phone"]
        photo = request.files.get("photo")
        photo_url = None
        down_payment_str = request.form.get("down_payment", "0")  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é "0"
        down_payment = float(down_payment_str) if down_payment_str else 0.0
        investor_id_raw = request.form.get("investor_id")
        print(f"DEBUG: investor_id from form = '{investor_id_raw}'")

        # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        if investor_id_raw and investor_id_raw != 'None':
            try:
                investor_id = int(investor_id_raw)
            except ValueError:
                investor_id = None
        else:
            investor_id = None

        created_at_str = request.form.get("created_at")
        created_at = datetime.strptime(created_at_str, "%Y-%m-%d") if created_at_str else datetime.utcnow()

        if photo and allowed_file(photo.filename):
            filename = secure_filename(photo.filename)
            photo.save(os.path.join(app.config["UPLOAD_FOLDER"], filename))
            photo_url = filename

        last_number = db.session.query(
            db.func.max(Item.user_contract_number)
        ).filter_by(user_id=current_user.id).scalar()

        item = Item(
            name=name,
            price=price,
            purchase_price=purchase_price,
            buyer=current_user.email,
            user_id=current_user.id,
            status="–û—Ñ–æ—Ä–º–ª–µ–Ω",
            installments=installments,
            client_name=client_name,
            client_phone=client_phone,
            guarantor_name=guarantor_name,
            guarantor_phone=guarantor_phone,
            photo_url=photo_url,
            down_payment=down_payment,
            created_at=created_at,
            user_contract_number=(last_number or 0) + 1,
            investor_id=investor_id  # —É–∂–µ int –∏–ª–∏ None ‚Äî –û–ö!
        )
        db.session.add(item)
        db.session.commit()
        flash("–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!", "success")
        # üëá –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ dashboard c –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–º, —á—Ç–æ–±—ã –æ–Ω –æ—Å—Ç–∞–ª—Å—è –≤—ã–±—Ä–∞–Ω
        return redirect(url_for("dashboard", investor_id=investor_id if investor_id else ""))

    # GET-–∑–∞–ø—Ä–æ—Å ‚Äî —Ç—É—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    selected_id = request.args.get("investor_id", type=int)

    today = date.today()
    items = Item.query.filter(
        Item.user_id == current_user.id,
        db.func.date(Item.created_at) == today
    ).all()

    license_expiration = current_user.active_license.expires_at if current_user.active_license else None

    investors = Investor.query.filter_by(user_id=current_user.id).all()

    return render_template(
        "dashboard.html",
        items=items,
        current_date=date.today().strftime("%Y-%m-%d"),
        license_expiration=license_expiration,
        investors=investors,
        selected_id=selected_id
    )



@app.route("/autocomplete")
@login_required
def autocomplete():
    query = request.args.get("query", "").strip().lower()

    # –ü–æ–∏—Å–∫ –ø–æ client_name —Å —É—á–µ—Ç–æ–º user_id
    results = (
        db.session.query(Item.client_name)
        .filter(
            Item.user_id == current_user.id,
            Item.client_name.ilike(f"%{query}%")
        )
        .distinct()
        .limit(10)
        .all()
    )

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫ —Å–ø–∏—Å–∫—É —Å—Ç—Ä–æ–∫
    client_names = [name for (name,) in results]

    return jsonify(client_names)



@app.route("/investors/add", methods=["GET", "POST"])
@login_required
def add_investor():
    if request.method == "POST":
        name = request.form["name"]
        investor = Investor(name=name, user_id=current_user.id)
        db.session.add(investor)
        db.session.commit()
        flash("–ò–Ω–≤–µ—Å—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω!", "success")
        return redirect(url_for("dashboard"))
    investors = Investor.query.filter_by(user_id=current_user.id).all()
    return render_template("add_investor.html", investors=investors)


@app.route("/investors/delete/<int:investor_id>", methods=["POST"])
@login_required
def delete_investor(investor_id):
    investor = Investor.query.get_or_404(investor_id)

    if investor.user_id != current_user.id:
        abort(403)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
    if investor.items:
        flash("–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞ ‚Äî –µ—Å—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã.", "danger")
        return redirect(url_for("add_investor"))

    db.session.delete(investor)
    db.session.commit()
    flash("–ò–Ω–≤–µ—Å—Ç–æ—Ä —É–¥–∞–ª—ë–Ω.", "info")
    return redirect(url_for("add_investor"))



#–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –≤–Ω—É—Ç—Ä–∏

@app.route("/payments")
@login_required
def payments():
    try:
        selected_id = request.args.get("investor_id", type=int)

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        investors = Investor.query.filter_by(user_id=current_user.id).all()

        # –ë–∞–∑–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        item_query = Item.query.filter_by(user_id=current_user.id)
        payment_query = Payment.query.join(Item, Payment.item_id == Item.id).filter(
            Payment.user_id == current_user.id,
            Item.user_id == current_user.id
        )

        # üîΩ –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –∏–Ω–≤–µ—Å—Ç–æ—Ä ‚Äî —Ñ–∏–ª—å—Ç—Ä—É–µ–º
        if selected_id is not None:
            item_query = item_query.filter(Item.investor_id == selected_id)
            payment_query = payment_query.filter(Item.investor_id == selected_id)

        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å—ã
        items = item_query.all()
        payments = payment_query.all()

        # –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ –ø—Ä–∏–Ω—Ç—ã (–º–æ–∂–Ω–æ –ø–æ—Ç–æ–º —É–±—Ä–∞—Ç—å)
        print(f"DEBUG: selected_id = {selected_id}")
        print(f"DEBUG: items count = {len(items)}")
        print(f"DEBUG: payments count = {len(payments)}")
        for item in items:
            print(f"Item id={item.id}, investor_id={item.investor_id}, price={item.price}, purchase_price={item.purchase_price}")
        for payment in payments:
            print(f"Payment id={payment.id}, amount={payment.amount}, item_id={payment.item_id}, item_investor_id={payment.item.investor_id}")

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        total_invested = sum(item.purchase_price or 0 for item in items)
        total_paid = sum(payment.amount for payment in payments)

        active_items = [item for item in items if item.status == "–û—Ñ–æ—Ä–º–ª–µ–Ω"]

        monthly_profit = sum(
            ((item.price or 0) - (item.purchase_price or 0)) / item.installments
            for item in active_items
            if item.installments and item.price and item.purchase_price
        )

        total_profit = sum(
            (item.price or 0) - (item.purchase_price or 0)
            for item in items
            if item.price and item.purchase_price
        )

        return render_template(
            "payments.html",
            total_invested=round(total_invested, 2),
            total_paid=round(total_paid, 2),
            monthly_profit=round(monthly_profit, 2),
            total_profit=round(total_profit, 2),
            items=items,
            payments=payments,
            investors=investors,
            selected_id=selected_id
        )

    except Exception as e:
        app.logger.error(f"Error in payments route: {str(e)}")
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}", 500


@app.route("/add_payment", methods=["GET", "POST"])
@login_required
def add_payment():

    selected_client = request.args.get("client_name") or request.form.get("client_name")
    items, payments = [], []
    error = None

    all_clients = sorted(
        [
            c[0]
            for c in db.session.query(Item.client_name)
            .filter(Item.user_id == current_user.id)
            .distinct()
            .all()
            if c[0]
        ],
        key=lambda x: str(x).lower()
    )

    if selected_client:
        try:
            exact_client_name = next(
                (
                    name for name in db.session.query(Item.client_name)
                    .filter(Item.user_id == current_user.id)
                    .distinct()
                    .all()
                    if name[0] and name[0].lower() == selected_client.lower()
                ),
                (selected_client,)
            )[0]

            items = Item.query.filter(
                db.func.lower(Item.client_name) == db.func.lower(exact_client_name),
                Item.user_id == current_user.id,
                Item.status == "–û—Ñ–æ—Ä–º–ª–µ–Ω"

            ).all()

            payments = db.session.query(Payment) \
                .join(Item) \
                .filter(
                    db.func.lower(Item.client_name) == db.func.lower(exact_client_name),
                    Item.user_id == current_user.id,

                ) \
                .order_by(Payment.id.desc()) \
                .all()

        except Exception as e:
            error = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}"
            items, payments = [], []

    if request.method == "POST":
        if not current_user.active_license:
            flash("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ª–∏—Ü–µ–Ω–∑–∏–∏!", "danger")
            return redirect(url_for("add_payment"))
        try:
            item_id = int(request.form.get("item_id"))
            amount = float(request.form.get("amount"))
            created_at_str = request.form.get("created_at")
            created_at = datetime.strptime(created_at_str, "%Y-%m-%d") if created_at_str else datetime.utcnow()

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            item = Item.query.filter_by(id=item_id, user_id=current_user.id).first()
            if not item:
                raise Exception("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")


            payment = Payment(item_id=item_id,  user_id=current_user.id,  amount=amount, created_at=created_at)
            db.session.add(payment)
            db.session.commit()

            total_paid = sum(p.amount for p in item.payments) + amount
            item.status = "–ó–∞–≤–µ—Ä—à–µ–Ω" if total_paid >= item.price else item.status




            flash("–£—Å–ø–µ—à–Ω–æ", "success")
            return redirect(url_for("add_payment", client_name=selected_client))

        except Exception as e:
            error = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {str(e)}"
            db.session.rollback()

    return render_template(
        "add_payment.html",

        client_name=selected_client,
        selected_client=selected_client,
        items=items,
        payments=payments,
        all_clients=all_clients,
        current_date=datetime.today().strftime("%Y-%m-%d"),
        error=error,


    )
@app.route("/search_clients")
@login_required
def search_clients():
    term = request.args.get("term", "")
    clients = (
        db.session.query(Item.client_name)
        .filter(Item.client_name.ilike(f"%{term}%"))
        .filter(Item.user_id == current_user.id)
        .distinct()
        .limit(10)
        .all()
    )
    results = [{"label": name[0], "value": name[0]} for name in clients]
    return jsonify(results)




@app.route("/payments/<int:item_id>", methods=["POST"])
@login_required
def make_payment(item_id):
    item = Item.query.filter_by(id=item_id, user_id=current_user.id).first_or_404()

    monthly_payment = item.price / item.months

    if item.payments_made < item.months:
        item.payments_made += 1

        if item.payments_made >= item.months:
            item.status = "paid"

        payment = Payment(item_id=item.id, amount=monthly_payment)
        db.session.add(payment)
        db.session.commit()

    return redirect(url_for("add_payment"))

@app.route("/api/items_by_client/<client_name>")
@login_required
def items_by_client(client_name):
    items = Item.query.filter_by(client_name=client_name, user_id=current_user.id).all()
    items_data = [
        {"id": item.id, "name": item.name, "price": item.price, "status": item.status}
        for item in items
    ]
    return jsonify(items_data)


@app.route("/delete_payment/<int:payment_id>", methods=["POST"])
@login_required
def delete_payment(payment_id):
    payment = Payment.query.get_or_404(payment_id)
    item = payment.item

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
    if item.user_id != current_user.id and not current_user.is_admin:

       abort(403)

    # —É–¥–∞–ª—è–µ–º –ø–ª–∞—Ç—ë–∂
    db.session.delete(payment)

    # –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    db.session.flush()  # —á—Ç–æ–±—ã item.payments ¬´—É–≤–∏–¥–µ–ª¬ª —É–¥–∞–ª–µ–Ω–∏–µ –≤ —ç—Ç–æ–π –∂–µ —Å–µ—Å—Å–∏–∏
    item.payments_made = len(item.payments)
    if sum(p.amount for p in item.payments) < item.price:
        item.status = "–û—Ñ–æ—Ä–º–ª–µ–Ω"

    db.session.commit()
    flash("–ü–ª–∞—Ç—ë–∂ —É–¥–∞–ª—ë–Ω", "danger")

    client_name = request.form.get("client_name") or item.client_name
    return redirect(url_for("add_payment", client_name=client_name))

# –ö–ª–∏–µ–Ω—Ç—ã


@app.route("/clients", methods=["GET", "POST"])
@login_required
def clients():
    search_query = request.form.get("search", "").strip()

    query = db.session.query(Item.client_name).filter(Item.user_id == current_user.id)

    if search_query:
        query = query.filter(Item.client_name.ilike(f"%{search_query}%"))

    client_names = query.distinct().all()

    all_clients_data = []

    for (client_name,) in client_names:
        items = Item.query.filter_by(client_name=client_name, user_id=current_user.id).all()
        client_data = []
        total_debt = 0

        for item in items:
            total_paid = sum(payment.amount for payment in item.payments)
            installment_price = item.price or 0
            remaining = installment_price - total_paid
            total_debt += remaining

            client_data.append({
                "item": item,
                "payments": item.payments,
                "total_paid": total_paid,
                "remaining": remaining
            })

        all_clients_data.append({
            "client_name": client_name,
            "client_data": client_data,
            "total_debt": total_debt
        })

    return render_template(
        "clients.html",
        all_clients_data=all_clients_data,
        search_query=search_query
    )


@app.route("/clients/<client_name>")
@login_required
def client_detail(client_name):
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ç–∞–∫–∏–µ —Ç–æ–≤–∞—Ä—ã –µ—Å—Ç—å —É —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    items = Item.query.filter_by(client_name=client_name, user_id=current_user.id).all()

    if not items:
        abort(403)

    client_data = []
    total_debt = 0

    for item in items:
        total_paid = sum(payment.amount for payment in item.payments)
        installment_price = item.price or 0
        remaining = installment_price - total_paid
        total_debt += remaining

        client_data.append({
            "item": item,
            "payments": item.payments,
            "total_paid": total_paid,
            "remaining": remaining
        })

    return render_template(
        "client_detail.html",
        client_name=client_name,
        client_data=client_data,
        total_debt=total_debt
    )




@app.route("/items/<int:item_id>/payments", methods=["GET", "POST"])
@login_required
def item_payments(item_id):
    item = Item.query.get_or_404(item_id)
    if item.user_id != current_user.id and not current_user.is_admin:
        abort(403)

    if request.method == "POST":
        if "add_payment" in request.form:

            try:
                amount = float(request.form.get("amount"))
                created_at_str = request.form.get("created_at")
                created_at = datetime.strptime(created_at_str, "%Y-%m-%d") if created_at_str else datetime.utcnow()

                payment = Payment(item_id=item.id, amount=amount, user_id=current_user.id, date=created_at, created_at=created_at)
                db.session.add(payment)
                db.session.commit()

                total_paid = sum(p.amount for p in item.payments)
                item.status = "–ó–∞–≤–µ—Ä—à–µ–Ω" if total_paid >= item.price else "–û—Ñ–æ—Ä–º–ª–µ–Ω"
                db.session.commit()

                flash("–ü–ª–∞—Ç—ë–∂ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω", "success")
            except Exception as e:
                flash(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {str(e)}", "danger")

        elif "delete_payment_id" in request.form:
            try:
                payment_id = int(request.form.get("delete_payment_id"))
                payment = Payment.query.get_or_404(payment_id)
                if item.user_id != current_user.id and not current_user.is_admin:
                    abort(403)

                db.session.delete(payment)
                db.session.commit()

                total_paid = sum(p.amount for p in item.payments)
                item.status = "–ó–∞–≤–µ—Ä—à–µ–Ω" if total_paid >= item.price else "–û—Ñ–æ—Ä–º–ª–µ–Ω"
                db.session.commit()

                flash("–ü–ª–∞—Ç—ë–∂ —É–¥–∞–ª—ë–Ω", "warning")
            except Exception as e:
                flash(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {str(e)}", "danger")

        return redirect(url_for("item_payments", item_id=item_id))

        # –ò–∑–º–µ–Ω–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ - —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    payments = Payment.query.filter_by(item_id=item.id).order_by(Payment.created_at.desc()).all()

    total_paid = sum(payment.amount for payment in payments)
    down_payment = item.down_payment or 0
    installment_price = item.price or 0

    remaining = max(installment_price - total_paid - down_payment, 0)
    current_date = datetime.today().strftime("%Y-%m-%d")

    return render_template(
        "item_payments.html",
        item=item,
        payments=payments,
        total_paid=total_paid,
        remaining=remaining,
        current_date=current_date
    )


#pdf —ç–∫—Å–ø–æ—Ä—Ç

@app.route("/export_pdf/<int:item_id>")
@login_required
def export_pdf(item_id):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    item = Item.query.get_or_404(item_id)
    if item.user_id != current_user.id and not current_user.is_admin:
        abort(403)
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–µ–π
    payments = Payment.query.filter_by(item_id=item.id)\
                           .order_by(Payment.created_at.asc())\
                           .all()

    # –°–æ–∑–¥–∞–Ω–∏–µ PDF
    buffer = BytesIO()
    doc = SimpleDocTemplate(
        buffer,
        pagesize=A4,
        leftMargin=60,
        rightMargin=40,
        topMargin=40,
        bottomMargin=30
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —à—Ä–∏—Ñ—Ç–∞
    font_path = os.path.join('static', 'fonts', 'DejaVuSans.ttf')
    pdfmetrics.registerFont(TTFont('DejaVuSans', font_path))

    # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Å—Ç–∏–ª–∏
    styles = getSampleStyleSheet()

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    styleH = ParagraphStyle(
        'Heading',
        parent=styles['Heading2'],
        fontName='DejaVuSans',  # –∑–∞–º–µ–Ω—è–µ–º Tahoma ‚Üí DejaVuSans
        fontSize=16,
        leading=20,
        spaceAfter=10,
        alignment=1  # —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º
    )

    # –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
    styleN = ParagraphStyle(
        'Normal',
        parent=styles['Normal'],
        fontName='DejaVuSans',  # –∑–∞–º–µ–Ω—è–µ–º Tahoma ‚Üí DejaVuSans
        fontSize=12,
        leading=15,  # –º–µ–∂—Å—Ç—Ä–æ—á–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
        spaceAfter=6  # –æ—Ç—Å—Ç—É–ø –ø–æ—Å–ª–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ (–Ω–µ–º–Ω–æ–≥–æ —É–≤–µ–ª–∏—á–∏–ª —Å 5 ‚Üí 6 –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏)
    )

    # –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    elements = []
    total_paid = sum(p.amount for p in payments)
    installment_price = item.price or 0
    remaining = installment_price - total_paid

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    elements.extend([
        Paragraph("–ê–∫—Ç —Å–≤–µ—Ä–∫–∏", styleH),
        Spacer(1, 12),
        Paragraph(f"–ö–ª–∏–µ–Ω—Ç: {item.client_name}", styleN),
        Spacer(1, 6),
        Paragraph(f"–¢–æ–≤–∞—Ä: {item.name}", styleN),
        Spacer(1, 6),
        Paragraph(f"–î–∞—Ç–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è: {item.created_at.strftime('%d.%m.%Y')}", styleN),
        Spacer(1, 6),
        Paragraph(f"–°—É–º–º–∞: {format_rubles(item.price)} ", styleN),
        Spacer(1, 6),
        Paragraph(f"–û–ø–ª–∞—á–µ–Ω–æ: {format_rubles(total_paid)} ", styleN),
        Spacer(1, 6),
        Paragraph(f"–û—Å—Ç–∞—Ç–æ–∫: {format_rubles(remaining)} ", styleN),
        Spacer(1, 6),
        Paragraph(f"–°—Ä–æ–∫ —Ä–∞—Å—Å—Ä–æ—á–∫–∏: {item.installments} –º–µ—Å.", styleN),
        Spacer(1, 6),
        Paragraph(f"–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç—ë–∂: {round((item.price - item.down_payment) / item.installments)} ‚ÇΩ", styleN),
        Spacer(1, 6),
        Spacer(1, 12)
    ])

    # –¢–∞–±–ª–∏—Ü–∞ –ø–ª–∞—Ç–µ–∂–µ–π
    data = [['‚Ññ', '–î–∞—Ç–∞', '–°—É–º–º–∞']]
    for i, p in enumerate(payments, 1):
        data.append([
            str(i),
            p.created_at.strftime('%d.%m.%Y'),
            format_rubles(p.amount)
        ])
    table = Table(data, colWidths=[30, 100, 100], hAlign='LEFT')
    table.setStyle(TableStyle([
        ('FONTNAME', (0, 0), (-1, -1), 'DejaVuSans'),
        ('FONTSIZE', (0, 0), (-1, -1), 10),
        ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#4a90e2')),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
        ('GRID', (0, 0), (-1, -1), 0.5, colors.black),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('BACKGROUND', (0, 1), (-1, -1), colors.whitesmoke),
        ('BOTTOMPADDING', (0, 0), (-1, -1), 6),
    ]))
    elements.append(table)

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF
    doc.build(elements)
    buffer.seek(0)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞
    pdf_filename = f"{item.client_name}_–∞–∫—Ç_—Å–≤–µ—Ä–∫–∏.pdf"
    return send_file(
        buffer,
        as_attachment=True,
        download_name=pdf_filename,
        mimetype='application/pdf'
    )

import re

@app.route('/whatsapp_link/<int:item_id>')
@login_required
def whatsapp_link(item_id):


    item = Item.query.get_or_404(item_id)
    if item.user_id != current_user.id and not current_user.is_admin:
        abort(403)

    if not item.client_phone:
        flash("–£ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.", "danger")
        return redirect(url_for('clients'))

    # –û—á–∏—â–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –¥–æ —Ü–∏—Ñ—Ä
    digits = re.sub(r'\D', '', item.client_phone)

    # –ó–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–≤—É—é 8 –Ω–∞ 7 (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª —Ä–æ—Å—Å–∏–π—Å–∫–∏–π –Ω–æ–º–µ—Ä —Å 8)
    if digits.startswith('8'):
        digits = '7' + digits[1:]

    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 7, –¥–æ–±–∞–≤–ª—è–µ–º
    if not digits.startswith('7'):
        digits = '7' + digits

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É
    link = f"https://wa.me/{digits}?text=–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –≤–æ—Ç –≤–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π: {request.url_root}static/pdfs/{item.client_name}_payments.pdf"

    return redirect(link)




# –í—Å–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã–µ
@app.route("/contracts")
@login_required
def contracts():
    search_query = request.args.get("q", "").strip()
    created_date_str = request.args.get("created_date", "").strip()

    query = Item.query

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ –Ω–µ –∞–¥–º–∏–Ω
    if not current_user.is_admin:
        query = query.filter(Item.user_id == current_user.id)

    # –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞, –Ω–∞–∑–≤–∞–Ω–∏—é —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –∏–º–µ–Ω–∏ –ø–æ—Ä—É—á–∏—Ç–µ–ª—è
    if search_query:
        query = query.filter(
            or_(
                Item.client_name.ilike(f"%{search_query}%"),
                Item.name.ilike(f"%{search_query}%"),
                Item.guarantor_name.ilike(f"%{search_query}%")
            )
        )

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∞—Ç–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
    if created_date_str:
        try:
            created_date = datetime.strptime(created_date_str, "%Y-%m-%d").date()
            query = query.filter(db.func.date(Item.created_at) == created_date)
        except ValueError:
            flash("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î.", "danger")

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞:
    # - –î–ª—è –∞–¥–º–∏–Ω–∞: —Å–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–µ –ø–æ –¥–∞—Ç–µ
    # - –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –ø–æ –µ–≥–æ –Ω–æ–º–µ—Ä—É –¥–æ–≥–æ–≤–æ—Ä–∞ (user_contract_number), —É–±—ã–≤–∞–Ω–∏–µ

    query = Item.query

    if not current_user.is_admin:
        query = query.filter(Item.user_id == current_user.id)  # –¢–æ–ª—å–∫–æ —Å–≤–æ–∏ –∑–∞–ø–∏—Å–∏

    items = query.order_by(Item.created_at.desc()).all()  # –û–±—â–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è –≤—Å–µ—Ö
    return render_template(
        "contracts.html",
        items=items,
        search_query=search_query,
        current_date=datetime.today().strftime('%Y-%m-%d')
    )








# –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ
@app.route("/overdue")
@login_required
def overdue():
    today = datetime.now().date()
    overdue_items = []

    # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã–µ –¥–æ–≥–æ–≤–æ—Ä—ã
    query = Item.query.filter_by(status="–û—Ñ–æ—Ä–º–ª–µ–Ω")

    # –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Äî —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –¥–æ–≥–æ–≤–æ—Ä—ã
    if not current_user.is_admin:
        query = query.filter(Item.user_id == current_user.id)

    items = query.all()

    overdue_count = 0  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫

    for item in items:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º installments, –∞ –Ω–µ months
        if not item.created_at or not item.installments:
            continue

        start_date = item.created_at.date()
        months_total = item.installments

        # –û–∂–∏–¥–∞–µ–º—ã–µ –¥–∞—Ç—ã –ø–ª–∞—Ç–µ–∂–µ–π ‚Äî –Ω–∞—á–∏–Ω–∞—è —Å–æ –≤—Ç–æ—Ä–æ–≥–æ –º–µ—Å—è—Ü–∞!
        expected_dates = [start_date + relativedelta(months=i + 1) for i in range(months_total)]

        # –ë–µ—Ä–µ–º –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –ø–æ —ç—Ç–æ–º—É item
        payments = Payment.query.filter_by(item_id=item.id).all()

        # –ö–∞–∫–∏–µ –º–µ—Å—è—Ü—ã —É–∂–µ –æ–ø–ª–∞—á–µ–Ω—ã ‚Äî –ø–æ –ø–æ–ª—é "date"
        paid_months = set((p.date.year, p.date.month) for p in payments if p.date)

        # –ö–∞–∫–∏–µ –ø–ª–∞—Ç–µ–∂–∏ –ø—Ä–æ–ø—É—â–µ–Ω—ã
        past_due_dates = [d for d in expected_dates if d < today]

        missed = []
        for d in past_due_dates:
            if (d.year, d.month) not in paid_months:
                missed.append(d)

        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º item –≤ —Å–ø–∏—Å–æ–∫
        if missed:
            item.missed_months = missed
            item.total_months = months_total
            item.payments_made = len(paid_months)
            item.overdue_months = len(missed)
            overdue_items.append(item)
            item.monthly_payment = round((item.price - item.down_payment) / item.installments)
            overdue_count += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫

    return render_template("overdue.html", items=overdue_items, overdue_count=overdue_count)

@app.context_processor
def inject_overdue_count():
    if current_user.is_authenticated:
        today = datetime.now().date()

        query = Item.query.filter_by(status="–û—Ñ–æ—Ä–º–ª–µ–Ω")
        if not current_user.is_admin:
            query = query.filter(Item.user_id == current_user.id)

        items = query.all()

        overdue_count = 0

        for item in items:
            if not item.created_at or not item.installments:
                continue

            start_date = item.created_at.date()
            months_total = item.installments

            expected_dates = [start_date + relativedelta(months=i+1) for i in range(months_total)]
            past_due_dates = [d for d in expected_dates if d < today]

            payments = Payment.query.filter_by(item_id=item.id).all()
            paid_months = set((p.date.year, p.date.month) for p in payments if p.date)

            missed = []
            for d in past_due_dates:
                if (d.year, d.month) not in paid_months:
                    missed.append(d)

            if missed:
                overdue_count += 1

        return dict(overdue_count=overdue_count)
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º 0
        return dict(overdue_count=0)



# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
if __name__ == "__main__":
    with app.app_context():
        db.create_all()
    app.run(host="0.0.0.0", port=8080)


